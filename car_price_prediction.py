# -*- coding: utf-8 -*-
"""car_price_prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1wMY6XpT67qEu4B6bkcxoD1_LjpfiIDz-
"""

#importing the dependencies
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression 
from sklearn.linear_model import Lasso
from sklearn import metrics

#Data collection and processing
#loading the data from csv file to pandas dataframe
car_dataset=pd.read_csv('/content/car data.csv')

#inspecting the first five rows of the dataframe
car_dataset.head()

#checking the number of rows and columns
car_dataset.shape

#getting some information about the dataset
car_dataset.info()

#find the number of missing values
car_dataset.isnull().sum()

#checking the distribution of categorical data
print(car_dataset.Fuel_Type.value_counts())

print(car_dataset.Seller_Type.value_counts())

print(car_dataset.Transmission.value_counts())

#encoding the categorical data
#encoding the fuel type column
car_dataset.replace({'Fuel_Type':{'Petrol':0,'Diesel':1,'CNG':2}},inplace=True)
car_dataset.replace({'Seller_Type':{'Dealer':0,'Individual':1}},inplace=True)
car_dataset.replace({'Transmission':{'Manual':0,'Automatic':1}},inplace=True)

car_dataset.head()

#splitting into data and target
X=car_dataset.drop(['Car_Name','Selling_Price'],axis=1)
Y=car_dataset['Selling_Price']

print(X)

#splitting the data into training and test data
X_train, X_test, Y_train, Y_test=train_test_split(X,Y,test_size=0.1,random_state=3)

#model training
#1.Linear_Regression
#Loading the Linear_Regression_Model
lin_reg_model=LinearRegression()

lin_reg_model.fit(X_train,Y_train)

#Model Evaluation
#prediction on training data
training_data_prediction=lin_reg_model.predict(X_train)

#R squared error
error_score=metrics.r2_score(Y_train, training_data_prediction)
print('R-square error',error_score)

#Visualize the actual prices and predicted prices
plt.scatter(Y_train,training_data_prediction)
plt.xlabel("Actual Price")
plt.ylabel("Predicted Price")
plt.title("Actual Prices VS Predcited Prices")
plt.show()

#prediction on test data
test_data_prediction=lin_reg_model.predict(X_test)

#R squared error
error_score=metrics.r2_score(Y_test, test_data_prediction)
print('R-square error',error_score)

#Visualize the actual prices and predicted prices on test data
plt.scatter(Y_test,test_data_prediction)
plt.xlabel("Actual Price")
plt.ylabel("Predicted Price")
plt.title("Actual Prices VS Predcited Prices")
plt.show()